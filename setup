#!/usr/bin/python

import os
import sys
import time
import json
import subprocess
import digitalocean

class digisetup(object):
    def __init__(self): 
        try:
            with open("config.json", "r") as tmp:
                curjson = json.loads(tmp.read())
                self.token = curjson[0]["token"]
        except IOError:
            print "Missing config.json file. e.g. [{\"token\":\"TOKENHERE\",\"sshkeys\":[123,123]}]"
            exit()

        self.manager = digitalocean.Manager(token=self.token)
        self.ssh_keys = self.manager.get_all_sshkeys()
        self.home = os.path.dirname(os.path.realpath(__file__))
        self.ansible_ssh = "ansible/ansible_ssh"

    # Runs ansible
    def run_ansible(self, name):
        print "Starting ansible setup based on ansible_setup.yml"
        if "honey" in name:
            subprocess.call(["ansible-playbook", "-i", "ansible/ssh/%s" % name\
                , "ansible/honeypot.yml"])
        elif "minecraft" in name:
            subprocess.call(["ansible-playbook", "-i", "ansible/ssh/%s" % name\
                , "ansible/minecraft.yml"])

    # Deletes an SSH config file
    def remove_ansible(self, name):
        try:
            os.remove("ansible/ssh/%s" % name)
        except OSError:
            return

    # Creates a temporary ansible file used for SSH configuration
    def add_ansible(self, name, ip):
        lul = [name, "ansible_ssh_host=%s" % ip, "ansible_ssh_port=22",\
            "ansible_ssh_user='root'", "ansible_ssh_private_key_file='~/.ssh/id_rsa'",\
            "ansible_ssh_common_args='-o StrictHostKeyChecking=no'"]

        home = "%s/ansible/ssh/%s" % (self.home, name)
        try:
            with open("%s" % home, "w+") as dritt:
                dritt.write(" ".join(lul))
        except IOError:
            os.mkdir("ansible/ssh") 
            with open("%s" % home, "w+") as dritt:
                dritt.write(" ".join(lul))
            

    def shutdown_all_droplets(self): 
        self.droplets = self.manager.get_all_droplets()
        self.droplet_check()
        cur_id = ""


        if len(sys.argv) > 2:
            try:
                cur_id = int(sys.argv[2])
            except ValueError:
                pass

            if cur_id:
                if isinstance(cur_id, int):
                    for droplet in self.droplets:
                        if droplet.id == cur_id:
                            if raw_input("Are you sure you want to delete \"%s\" (%s)? yes/N: " \
                                % (droplet.id, droplet.name)) == "yes":
                                droplet.destroy()
                                print "Deleted %s successfully" % droplet.id
                                self.remove_ansible(droplet.name)
                                break
                    return 

            if sys.argv[2].lower() == "y" or sys.argv[2].lower() == "-y":
                for droplet in self.droplets:
                    try:
                        droplet.destroy()
                        self.remove_ansible(droplet.name)
                        self.add_ssh_to_list(self.get_droplet(droplet.id), delete=True)
                    except digitalocean.baseapi.DataReadError as e:
                        print "%s" % e

                print "Deleted all droplets."
                return
                
        self.get_droplet()
        for droplet in self.droplets:
            if raw_input("Destroy %s? yes/N: " % droplet.name).lower() == "yes":
                print "Destroying \"%s\"" % droplet.name
                droplet.destroy()
                self.remove_ansible(droplet.name)

    def droplet_check(self):
        try:
            if len(self.droplets) <= 0:
                print "No available droplets."
                exit()
        except AttributeError:
            # Means one in progress
            pass

    def get_droplet(self, cur_id=""):
        self.droplet_check()

        if not cur_id:
            self.droplets = self.manager.get_all_droplets() 
            print "_"*58
            print "| %s | %s | %s | %s |" % ("Name".ljust(10)\
                , "IP".ljust(15), "Status".ljust(10), "ID".ljust(10))
            for item in self.droplets:
                print "| %s | %s | %s | %s |" % (item.name.ljust(10)\
                    , item.networks["v4"][0]["ip_address"].ljust(15)\
                    , item.status.ljust(10), str(item.id).ljust(10))
                print
            return

        droplet = digitalocean.Droplet.get_object(self.token, cur_id)
        return droplet

    def is_droplet_up(self, cur_id, droplet=""):
        if not droplet:
            droplet = self.get_droplet(cur_id=cur_id)

        return droplet.status

    def get_registered_keys(self):
        test = self.manager.get_all_sshkeys()
        for item in test:
            print item.name
            print item.id
        print len(test)
        #digitalocean.SSHKey.load(token=self.token)

    def create_droplet(self, name=""):
        if len(sys.argv) > 2:
            name = sys.argv[2] 

        if not name:
            print "Missing name as argument two."
            return

        # Hardcoded droplet :(
        droplet = digitalocean.Droplet( 
            token=self.token,	
            name='%s' % name,
            region='ams2', 
            image="ubuntu-16-04-x64",
            size_slug='512mb', 
            backups=False,
            ssh_keys=self.ssh_keys
        )
        #image='debian-8-x64',
        digisetup = droplet.create()
        new_droplet = ""

        while(1):
            try:
                new_droplet = self.get_droplet(droplet.id)
                ip = new_droplet.networks["v4"][0]["ip_address"]
                break
            except IndexError:
                continue

        print "Creating ssh token for ansible."
        self.add_ssh_to_list(ip, name)
        print "Adding ansible config. IP: %s" % ip
        self.add_ansible(name, ip)
        print "Created %s." % name

        response = ""
        while(response != "active"):
            print "Waiting 10 sec for response \"active\". Current: %s" % response
            response = self.is_droplet_up(new_droplet.id)
            time.sleep(10)

        self.run_ansible(name)
        #self.remove_ansible(name)

# Add SSH key to .ssh/config etc.

    def add_ssh_to_list(self, ip, name="", delete=False):
        home = "%s/.ssh/config" % os.getenv("HOME") 
        if not os.path.isfile(home):
            print "No file in %s/.ssh/config"
            exit()

        if not delete and not name:
            print "No name suggested."
            exit()


        if not delete:
            with open(home, "a") as tmp:
                tmp.write("Host %s\nUser root\nHostName %s\nIdentityFile ~/.ssh/id_rsa\nStrictHostKeyChecking no\n\n" % (name, ip)) 
                print "Added %s to %s" % (name, home) 
            return

if __name__ == "__main__":
    digisetup = digisetup()
    #print digisetup.is_droplet_up(47385761)

    if len(sys.argv) < 2:
        print "Usage: ./setup.py create/list/delete"
        exit()

    if sys.argv[1] == "create":
        digisetup.create_droplet()
    elif sys.argv[1] == "getkeys":
        digisetup.get_registered_keys()
    elif sys.argv[1] == "list":
        digisetup.get_droplet()
    elif sys.argv[1] == "delete" or sys.argv[1] == "destroy":
        digisetup.shutdown_all_droplets()
    elif sys.argv[1] == "provision":
        digisetup.run_ansible(sys.argv[2])
    else:
        print "No argument \"%s\"." % sys.argv[1]
